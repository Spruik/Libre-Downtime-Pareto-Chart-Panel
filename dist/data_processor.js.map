{"version":3,"sources":["../src/data_processor.js"],"names":["restructuredData","rowCols","rows","data","cols","reduce","arr","c","col","text","toLowerCase","push","i","length","row","serise","k","getCategories","categories","d","category","undefined","Array","from","Set","getCategoriesData","categoriesData","sum","durSum","categoryData","filter","duration","durationint","hours","moment","asHours","fixedHours","hasDecimal","parseFloat","toFixed","item","value","type","name","isDurationMode","percent","durPercent","p","durP","total","durationTotal","sortMax","key","sort","a","b","filterItems","accumulatePercentages","temp","getReasonsData","reasonsData","items","takeItems","reasonData","parentreason","r","reason","toDuration","utils","copyObject","toHrsAndMins","difference","daysDiff","Math","floor","hrsDiff","minsDiff","secsDiff","timeToAdd","n"],"mappings":"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","file":"data_processor.js","sourcesContent":["import * as utils from './utils'\nimport moment from 'moment'\n\n/**\n * Expecting columns names, and rows values\n * Return {col-1 : value-1, col-2 : value-2 .....}\n * @param {*} rowCols \n * @param {*} rows \n */\nexport function restructuredData (rowCols, rows) {\n  let data = []\n  let cols = rowCols.reduce((arr, c) => {\n    const col = c.text.toLowerCase()\n    arr.push(col)\n    return arr\n  }, [])\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i]\n    let serise = {}\n    for (let k = 0; k < cols.length; k++) {\n      const col = cols[k]\n      serise[col] = row[k]\n    }\n    data.push(serise)\n  }\n\n  return data\n}\n\n/**\n * Expecting the restructured datalist\n * Return an array with distinct categories  --> ['category-1', 'category-2', ...]\n * @param {*} data \n */\nexport function getCategories(data) {\n  \n  let categories = data.reduce((arr, d) => {\n    if (d.category !== null && d.category !== undefined) {\n      arr.push(d.category)\n    }\n    return arr\n  }, [])\n  \n  return Array.from(new Set(categories))\n}\n\n/**\n * Expecting categories-legends and the restructured datalist\n * For each legend, filter this legends data from the datalist, and then return an array of obj in this format\n * [{value: categoryData.length, type: 'Category', name: category}, .....]\n * \n * Note: The first item will be set to be selected = true\n * \n * @param {*} categories \n * @param {*} data \n */\nexport function getCategoriesData(categories, data) {\n  let categoriesData = []\n\n  let sum = 0.00\n  let durSum = 0.00\n  for (let i = 0; i < categories.length; i++) {\n    const category = categories[i];\n    const categoryData = data.filter(d => d.category === category)\n    \n    let duration = 0.00\n    for (let i = 0; i < categoryData.length; i++) {\n      const c = categoryData[i];\n      if (c.durationint) {\n        duration += c.durationint\n      }\n    }\n    \n    let hours = moment.duration(duration).asHours()\n    let fixedHours = hours\n    if (hasDecimal(hours)) {\n      fixedHours = parseFloat(hours.toFixed(2))\n    }\n    \n    const item = {value: categoryData.length, type: 'Category', name: category, duration: fixedHours, isDurationMode: false}\n    sum += item.value\n    durSum += hours\n\n    categoriesData.push(item)\n  }\n\n  if (hasDecimal(durSum)) {\n    durSum = parseFloat(durSum.toFixed(2))\n  }\n  \n  for (let i = 0; i < categoriesData.length; i++) {\n    let percent = (categoriesData[i].value / sum * 100)\n    if (hasDecimal(percent)) {\n      percent = parseFloat(percent.toFixed(2))\n    }\n    let durPercent = (categoriesData[i].duration / durSum * 100)\n\n    categoriesData[i].p = percent\n    categoriesData[i].durP = durPercent\n    categoriesData[i].total = sum\n    categoriesData[i].durationTotal = durSum\n  }\n  \n  return categoriesData\n}\n\nexport function sortMax(data, key){\n  return key === 'value' ? data.sort((a, b) => b.value - a.value) : data.sort((a, b) => b.duration - a.duration)\n}\n\nexport function filterItems(data, key){\n  return data.reduce((arr, d) => {\n    if (key === 'name') {\n      arr.push(d.name)\n    }else if (key === 'value') {\n      arr.push(d.value)\n    }else if (key === 'percent') {\n      arr.push(d.p)\n    }else if (key === 'duration') {\n      arr.push(d.duration)\n    }else if (key === 'dur-p') {\n      arr.push(d.durP)\n    }\n    return arr\n  }, [])\n}\n\nexport function accumulatePercentages(arr) {\n  let temp = 0.00\n  for (let i = 0; i < arr.length; i++) {\n    temp += arr[i]\n\n    if (hasDecimal(temp)) { temp = parseFloat(temp.toFixed(2)) }\n\n    if (i === arr.length - 1) {\n      //set the last item to 100\n      arr[i] = 100\n    }else {\n      arr[i] = temp\n    }\n  }\n  return arr\n}\n\nexport function getReasonsData(category, data) {\n  let reasonsData = []\n\n  const items = takeItems(category, data)\n  \n  let sum = 0.00\n  let durSum = 0.00\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    const reasonData = data.filter(d => d.category === category && d.parentreason === item)\n\n    let duration = 0.00\n    for (let i = 0; i < reasonData.length; i++) {\n      const r = reasonData[i];\n      if (r.durationint) {\n        duration += r.durationint\n      }\n    }\n\n    let hours = moment.duration(duration).asHours()\n    let fixedHours = hours\n    if (hasDecimal(hours)) {\n      fixedHours = parseFloat(hours.toFixed(2))\n    }\n\n    const reason = {value: reasonData.length, type: 'Reason', name: item, duration: fixedHours, isDurationMode: false}\n    sum += reason.value\n    durSum += hours\n\n    reasonsData.push(reason)\n  }\n\n  if (hasDecimal(durSum)) {\n    durSum = parseFloat(durSum.toFixed(2))\n  }\n\n  for (let i = 0; i < reasonsData.length; i++) {\n    let percent = (reasonsData[i].value / sum * 100)\n    \n    if (hasDecimal(percent)) {\n      percent = parseFloat(percent.toFixed(2))\n    }\n\n    let durPercent = (reasonsData[i].duration / durSum * 100)\n\n    reasonsData[i].durP = durPercent\n    reasonsData[i].p = percent\n    reasonsData[i].durationTotal = durSum\n  }\n    \n  return reasonsData\n}\n\nexport function toDuration(data) {\n  let d = utils.copyObject(data)\n  for (let i = 0; i < d.length; i++) {\n    d[i].value = d[i].duration / 1000000\n    d[i].isDurationMode = true\n  }\n  return d\n}\n\n/**\n * Expecting a duration int value, return (string) hours and mins like 2:35 meaning 2 hours and 35 mins\n * if val is under 1 hour,  return (string) mins like 55-mins \n * @param {*} val \n */\nexport function toHrsAndMins(difference){  \n  const daysDiff = Math.floor(difference/1000/60/60/24)\n  difference -= daysDiff*1000*60*60*24\n\n  let hrsDiff = Math.floor(difference/1000/60/60)\n  difference -= hrsDiff*1000*60*60\n\n  const minsDiff = Math.floor(difference/1000/60)\n  difference -= minsDiff*1000*60\n\n  const secsDiff = Math.floor(difference/1000)\n  difference -= minsDiff*1000\n\n  let timeToAdd = daysDiff * 24\n  hrsDiff = hrsDiff + timeToAdd\n  \n  if (hrsDiff === 0 && minsDiff === 0) {\n    return secsDiff + ' Seconds'\n  }else if (hrsDiff === 0 && minsDiff !== 0) {\n    return minsDiff + ' Minutes'\n  }\n\n  return hrsDiff + ' Hrs & ' + minsDiff + ' Mins'\n}\n\n//look for the distinct items that this category has\nfunction takeItems(category, data){\n  return Array.from(new Set(data.reduce((arr, d) => {\n    if (d.reason !== null && d.reason !== undefined) {\n      //because the reasons in the influxdb is stored like 'root reason | sub reason'\n      //reasons.length === 1 meaning that there is no sub reasons for this item\n      //because this chart only display categories and reasons up to reason level - 1\n      if (d.category === category && d.parentreason !== null && d.parentreason !== undefined) {\n        arr.push(d.parentreason)\n      }\n    }\n    return arr\n  }, [])))\n}\n\nfunction hasDecimal(n){\n  return (n - Math.floor(n)) !== 0 ? true : false\n}\n"]}