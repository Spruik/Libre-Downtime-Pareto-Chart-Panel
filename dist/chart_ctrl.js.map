{"version":3,"sources":["../src/chart_ctrl.js"],"names":["angular","_","$","dp","pie","utils","echarts","MetricsPanelCtrl","panelDefaults","targets","pageSize","showHeader","styles","columns","fontSize","ChartCtrl","$scope","$injector","templateSrv","annotationsSrv","$sanitize","variableSrv","pageIndex","panel","fields","defaults","events","on","onDataReceived","bind","onDataError","hasData","datasource","transform","setTimeQueryStart","getAnnotations","dashboard","range","then","data","annotations","err","dataRaw","render","dataList","length","undefined","type","console","log","restructuredData","rows","getCategories","globe_data","scope","elem","attrs","ctrl","$panelContainer","find","myChart","init","renderPanel","option","getOption","off","setOption","setTimeout","height","resize","window","onresize","p","seriesType","seriesName","legend","series","name","xAxis","toolbox","feature","myTool1","show","reasons","getReasonsData","checkIsDurationMode","sortedReasons","sortMax","sortedReasonsLabel","filterItems","sortedReasonsValue","sortedReasonsPercent","accumulatePercentages","totalVal","reduce","total","val","yAxis","max","durationTotal","renderingCompleted","templateUrl"],"mappings":"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","file":"chart_ctrl.js","sourcesContent":["import angular from 'angular'\nimport _ from 'lodash'\nimport $ from 'jquery'\nimport * as dp from './data_processor'\nimport * as pie from './pie_chart_option'\nimport * as utils from './utils'\nimport echarts from './libs/echarts.min'\nimport {MetricsPanelCtrl} from 'app/plugins/sdk'\nimport './css/style.css!'\nimport './css/bootstrap-slider.css!'\n\nconst panelDefaults = {\n  targets: [{}],\n  pageSize: null,\n  showHeader: true,\n  styles: [],\n  columns: [],\n  fontSize: '100%',\n};\n\nexport class ChartCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, templateSrv, annotationsSrv, $sanitize, variableSrv) {\n    super($scope, $injector);\n\n    this.pageIndex = 0;\n\n    if (this.panel.styles === void 0) {\n      this.panel.styles = this.panel.columns;\n      this.panel.columns = this.panel.fields;\n      delete this.panel.columns;\n      delete this.panel.fields;\n    }\n\n    _.defaults(this.panel, panelDefaults);\n\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n\n    this.hasData = false\n  }\n\n  issueQueries(datasource) {\n    this.pageIndex = 0;\n\n    if (this.panel.transform === 'annotations') {\n      this.setTimeQueryStart();\n      return this.annotationsSrv\n        .getAnnotations({\n          dashboard: this.dashboard,\n          panel: this.panel,\n          range: this.range,\n        })\n        .then(annotations => {\n          return { data: annotations };\n        });\n    }\n\n    return super.issueQueries(datasource);\n  }\n\n  onDataError(err) {\n    this.dataRaw = [];\n    this.render();\n  }\n\n  onDataReceived(dataList) {\n\n    if (dataList.length === 0 || dataList === null || dataList === undefined) {\n        // console.log('No data reveived')\n        this.hasData = false\n        return\n    }else {\n        this.hasData = true\n    }\n\n    if (dataList[0].type !== 'table') {\n        console.log('To show the pie chart, please format data as a TABLE in the Metrics Setting')\n        return\n    }\n\n    //dataList data is messy and with lots of unwanted data, so we need to filter out data that we want -\n    let data = dp.restructuredData(dataList[0].columns, dataList[0].rows)\n\n    if (dp.getCategories(data).length === 0) {\n      this.hasData = false\n      return\n    }    \n\n    this.render(data)\n  }\n\n  rendering(){\n    this.render(this.globe_data)\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    const $panelContainer = elem.find('#reason-codes-pareto-chart')[0];\n    const myChart = echarts.init($panelContainer)\n    \n    function renderPanel(data) { \n      if (!myChart || !data) { return; }\n      const option = pie.getOption(data, myChart)\n\n      myChart.off('click')\n      myChart.setOption(option);\n      setTimeout(() => {\n        $('#reason-codes-pareto-chart').height(ctrl.height - 51)\n        myChart.resize();\n        window.onresize = () => {\n            myChart.resize();\n        }\n      }, 500);\n      myChart.on('click', p => {            \n        if (p.seriesType === 'bar' && p.seriesName !== 'Reasons') {\n\n          option.legend.data[0] = 'Reasons'\n          option.series[0].name = 'Reasons'\n          option.xAxis[0].name = 'Category: ' + p.name\n          option.toolbox.feature.myTool1.show = true\n          let reasons = dp.getReasonsData(p.name, data)\n\n          if (!pie.checkIsDurationMode()) {\n            //get reasons\n            let sortedReasons = dp.sortMax(reasons, 'value')\n            //get reason label\n            let sortedReasonsLabel = dp.filterItems(sortedReasons, 'name')\n            //get reason value\n            let sortedReasonsValue = dp.filterItems(sortedReasons, 'value')\n            //get reason percent\n            let sortedReasonsPercent = dp.filterItems(sortedReasons, 'percent')\n            sortedReasonsPercent = dp.accumulatePercentages(sortedReasonsPercent)\n            //get total value\n            let totalVal = sortedReasonsValue.reduce((total, val) => total + val)\n\n            option.series[0].data = sortedReasonsValue\n            option.xAxis[0].data = sortedReasonsLabel\n            option.series[1].data = sortedReasonsPercent\n            option.yAxis[0].max = totalVal\n            \n          }else {\n            let sortedReasons = dp.sortMax(reasons, 'duration')\n            let sortedReasonsLabel = dp.filterItems(sortedReasons, 'name')\n            let sortedReasonsValue = dp.filterItems(sortedReasons, 'duration')\n            let sortedReasonsPercent = dp.filterItems(sortedReasons, 'dur-p')\n            sortedReasonsPercent = dp.accumulatePercentages(sortedReasonsPercent)\n\n            option.series[0].data = sortedReasonsValue\n            option.xAxis[0].data = sortedReasonsLabel\n            option.series[1].data = sortedReasonsPercent\n            option.yAxis[0].max = sortedReasons[0].durationTotal\n          }\n\n          myChart.setOption(option);\n        }\n      })\n    }\n\n    ctrl.events.on('panel-size-changed', () => {\n      if (myChart) { \n          const height = ctrl.height - 51\n          if (height >= 280) {\n            $('#reason-codes-pareto-chart').height(height);\n          }\n          myChart.resize(); \n      }\n    })\n\n    ctrl.events.on('render', data => {\n      renderPanel(data);\n      ctrl.renderingCompleted();\n    });\n  }\n\n}\n\nChartCtrl.templateUrl = 'partials/module.html';\n"]}